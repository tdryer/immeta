var searchIndex = {};
searchIndex['immeta'] = {"items":[[0,"","immeta","immeta allows one to load metadata from files of various image formats.",null,null],[3,"Dimensions","","Represents image dimensions in pixels.",null,null],[12,"width","","Image width in pixels.",0,null],[12,"height","","Image height in pixels.",0,null],[4,"Error","","Library-specific error type which is returned by metadata loading operations.",null,null],[13,"InvalidFormat","","Returned when metadata can't be recovered because image format is invalid.",1,null],[13,"UnexpectedEndOfFile","","Returned when metadata can't be recovered because of the sudden end of the image file.",1,null],[13,"Io","","Returned when an I/O error occurs when reading an input stream.",1,null],[4,"GenericMetadata","","Represents metadata loaded from a file whose format was determined automatically.",null,null],[13,"Png","","",2,null],[13,"Gif","","",2,null],[13,"Jpeg","","",2,null],[13,"Webp","","",2,null],[5,"load","","Attempts to load metadata for an image contained in the provided input stream.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"load_from_file","","Attempts to load metadata for an image contained in a file identified by the provided path.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"load_from_buf","","Attempts to load metadata for an image contained in an in-memory buffer.",null,null],[0,"markers","","Contains metadata marker types.",null,null],[4,"Jpeg","immeta::markers","",null,null],[4,"Png","","",null,null],[4,"Gif","","",null,null],[4,"Webp","","",null,null],[8,"MetadataMarker","","A marker trait for specific metadata type.",null,null],[16,"Metadata","","",3,null],[10,"from_generic","","Tries to convert the given `GenericMetadata` instance into a concrete metadata type.",3,{"inputs":[{"name":"metadatamarker"},{"name":"genericmetadata"}],"output":{"name":"result"}}],[10,"from_generic_ref","","Tries to extract a reference to a concrete metadata type from the given\n`GenericMetadata` reference.",3,{"inputs":[{"name":"metadatamarker"},{"name":"genericmetadata"}],"output":{"name":"option"}}],[10,"load","","Attempts to load metadata for an image of a concrete type from the provided reader.",3,{"inputs":[{"name":"metadatamarker"},{"name":"r"}],"output":{"name":"result"}}],[10,"load_from_file","","Attempts to load metadata for an image of a concrete type from a file identified\nby the provided path.",3,{"inputs":[{"name":"metadatamarker"},{"name":"p"}],"output":{"name":"result"}}],[10,"load_from_buf","","Attempts to load metadata for an image of a concrete type from the provided byte\nbuffer.",3,null],[11,"from_generic","","",4,{"inputs":[{"name":"jpeg"},{"name":"genericmetadata"}],"output":{"name":"result"}}],[11,"from_generic_ref","","",4,{"inputs":[{"name":"jpeg"},{"name":"genericmetadata"}],"output":{"name":"option"}}],[11,"load","","",4,{"inputs":[{"name":"jpeg"},{"name":"r"}],"output":{"name":"result"}}],[11,"load_from_file","","",4,{"inputs":[{"name":"jpeg"},{"name":"p"}],"output":{"name":"result"}}],[11,"load_from_buf","","",4,null],[11,"from_generic","","",5,{"inputs":[{"name":"png"},{"name":"genericmetadata"}],"output":{"name":"result"}}],[11,"from_generic_ref","","",5,{"inputs":[{"name":"png"},{"name":"genericmetadata"}],"output":{"name":"option"}}],[11,"load","","",5,{"inputs":[{"name":"png"},{"name":"r"}],"output":{"name":"result"}}],[11,"load_from_file","","",5,{"inputs":[{"name":"png"},{"name":"p"}],"output":{"name":"result"}}],[11,"load_from_buf","","",5,null],[11,"from_generic","","",6,{"inputs":[{"name":"gif"},{"name":"genericmetadata"}],"output":{"name":"result"}}],[11,"from_generic_ref","","",6,{"inputs":[{"name":"gif"},{"name":"genericmetadata"}],"output":{"name":"option"}}],[11,"load","","",6,{"inputs":[{"name":"gif"},{"name":"r"}],"output":{"name":"result"}}],[11,"load_from_file","","",6,{"inputs":[{"name":"gif"},{"name":"p"}],"output":{"name":"result"}}],[11,"load_from_buf","","",6,null],[11,"from_generic","","",7,{"inputs":[{"name":"webp"},{"name":"genericmetadata"}],"output":{"name":"result"}}],[11,"from_generic_ref","","",7,{"inputs":[{"name":"webp"},{"name":"genericmetadata"}],"output":{"name":"option"}}],[11,"load","","",7,{"inputs":[{"name":"webp"},{"name":"r"}],"output":{"name":"result"}}],[11,"load_from_file","","",7,{"inputs":[{"name":"webp"},{"name":"p"}],"output":{"name":"result"}}],[11,"load_from_buf","","",7,null],[11,"dimensions","immeta","Returns image dimensions from the contained metadata.",2,{"inputs":[{"name":"genericmetadata"}],"output":{"name":"dimensions"}}],[11,"mime_type","","Returns a MIME type string for the image type of the contained metadata.",2,{"inputs":[{"name":"genericmetadata"}],"output":{"name":"str"}}],[11,"into","","Attemts to convert this value to the specific metadata type by value.",2,{"inputs":[{"name":"genericmetadata"}],"output":{"name":"result"}}],[11,"as_ref","","Attempts to convert this value to the sepcific metadata type by reference.",2,{"inputs":[{"name":"genericmetadata"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"dimensions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"dimensions"},{"name":"dimensions"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"dimensions"},{"name":"dimensions"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"dimensions"}],"output":{"name":"dimensions"}}],[11,"from","","",0,null],[0,"common","","",null,null],[0,"riff","immeta::common","",null,null],[3,"ChunkId","immeta::common::riff","",null,null],[3,"RiffReader","","",null,null],[3,"RiffChunk","","",null,null],[3,"RiffListChunk","","",null,null],[11,"fmt","","",8,{"inputs":[{"name":"chunkid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"chunkid"},{"name":"chunkid"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"chunkid"},{"name":"chunkid"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"chunkid"}],"output":{"name":"chunkid"}}],[11,"as_str","","",8,{"inputs":[{"name":"chunkid"}],"output":{"name":"option"}}],[11,"as_bytes","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"chunkid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[{"name":"riffreader"},{"name":"r"}],"output":{"name":"riffreader"}}],[11,"root","","",9,{"inputs":[{"name":"riffreader"}],"output":{"name":"result"}}],[11,"chunk_id","","",10,{"inputs":[{"name":"riffchunk"}],"output":{"name":"chunkid"}}],[11,"len","","",10,{"inputs":[{"name":"riffchunk"}],"output":{"name":"u32"}}],[11,"contents","","",10,{"inputs":[{"name":"riffchunk"}],"output":{"name":"read"}}],[11,"can_have_subchunks","","",10,{"inputs":[{"name":"riffchunk"}],"output":{"name":"bool"}}],[11,"into_list","","",10,{"inputs":[{"name":"riffchunk"}],"output":{"name":"result"}}],[11,"chunk_id","","",11,{"inputs":[{"name":"rifflistchunk"}],"output":{"name":"chunkid"}}],[11,"len","","",11,{"inputs":[{"name":"rifflistchunk"}],"output":{"name":"u32"}}],[11,"chunk_type","","",11,{"inputs":[{"name":"rifflistchunk"}],"output":{"name":"chunkid"}}],[11,"next","","",11,{"inputs":[{"name":"rifflistchunk"}],"output":{"name":"option"}}],[0,"formats","immeta","Supported image types.",null,null],[0,"jpeg","immeta::formats","Metadata of JPEG images.",null,null],[3,"Metadata","immeta::formats::jpeg","Represents metadata of a JPEG image.",null,null],[12,"dimensions","","Image size.",12,null],[11,"fmt","","",12,{"inputs":[{"name":"metadata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"metadata"},{"name":"metadata"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"metadata"},{"name":"metadata"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"metadata"}],"output":{"name":"metadata"}}],[11,"load","","",12,{"inputs":[{"name":"metadata"},{"name":"r"}],"output":{"name":"result"}}],[0,"png","immeta::formats","Metadata for PNG images.",null,null],[3,"Metadata","immeta::formats::png","Represents metadata of a PNG image.",null,null],[12,"dimensions","","Width and height.",13,null],[12,"color_type","","Color type used in the image.",13,null],[12,"color_depth","","Color depth (bits per pixel) used in the image.",13,null],[12,"compression_method","","Compression method used in the image.",13,null],[12,"filter_method","","Preprocessing method used in the image.",13,null],[12,"interlace_method","","Transmission order used in the image.",13,null],[4,"ColorType","","Color type used in an image.",null,null],[13,"Grayscale","","",14,null],[13,"Rgb","","",14,null],[13,"Indexed","","",14,null],[13,"GrayscaleAlpha","","",14,null],[13,"RgbAlpha","","",14,null],[4,"CompressionMethod","","Compression method used in an image.",null,null],[13,"DeflateInflate","","",15,null],[4,"FilterMethod","","Filtering method used in an image.",null,null],[13,"AdaptiveFiltering","","",16,null],[4,"InterlaceMethod","","Interlace method used in an image.",null,null],[13,"Disabled","","",17,null],[13,"Adam7","","",17,null],[11,"fmt","","",14,{"inputs":[{"name":"colortype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"colortype"}],"output":{"name":"colortype"}}],[11,"fmt","","",15,{"inputs":[{"name":"compressionmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"compressionmethod"},{"name":"compressionmethod"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"compressionmethod"},{"name":"compressionmethod"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"compressionmethod"}],"output":{"name":"compressionmethod"}}],[11,"fmt","","",16,{"inputs":[{"name":"filtermethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"filtermethod"}],"output":{"name":"filtermethod"}}],[11,"fmt","","",17,{"inputs":[{"name":"interlacemethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"interlacemethod"},{"name":"interlacemethod"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"interlacemethod"},{"name":"interlacemethod"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"interlacemethod"}],"output":{"name":"interlacemethod"}}],[11,"fmt","","",13,{"inputs":[{"name":"metadata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"metadata"},{"name":"metadata"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"metadata"},{"name":"metadata"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"metadata"}],"output":{"name":"metadata"}}],[11,"load","","",13,{"inputs":[{"name":"metadata"},{"name":"r"}],"output":{"name":"result"}}],[0,"gif","immeta::formats","Metadata of GIF images.",null,null],[3,"ColorTable","immeta::formats::gif","Contains information about a color table (global or local).",null,null],[12,"size","","Color table size, between 2 and 256.",18,null],[12,"sorted","","Whether the color table is sorted. Quoting from GIF spec:",18,null],[3,"ImageDescriptor","","Contains metadata about an image block, i.e. a single frame of a GIF image.",null,null],[12,"left","","Offset of the image data from the left boundary of the logical screen.",19,null],[12,"top","","Offset of the image data from the top boundary of the logical screen.",19,null],[12,"width","","Width of the image data.",19,null],[12,"height","","Height of the image data.",19,null],[12,"local_color_table","","Information about local color table, if it is present.",19,null],[12,"interlace","","Whether the image is interlaced.",19,null],[3,"GraphicControlExtension","","Contains metadata for a graphic control extension block.",null,null],[12,"disposal_method","","Indicates how the graphic should be treated after it is displayed.",20,null],[12,"user_input","","Whether or not user input is required before continuing.",20,null],[12,"transparent_color_index","","Specifies \"transparent\" color in a color table, if available.",20,null],[12,"delay_time","","Defines the delay before processing the rest of the GIF stream.",20,null],[3,"PlainTextExtension","","Contains metadata for a plain text extension block.",null,null],[12,"left","","Column number, in pixels, of the left edge of the text grid, with respect to\nthe left edge of the logical screen.",21,null],[12,"top","","Same as above, for the top edges.",21,null],[12,"width","","Width of the text grid in pixels.",21,null],[12,"height","","Height of the text grid in pixels.",21,null],[12,"cell_width","","Width in pixels of each cell in the text grid.",21,null],[12,"cell_height","","Height in pixels of each cell in the text grid.",21,null],[12,"foreground_color_index","","Index of a foreground color in the global color table.",21,null],[12,"background_color_index","","Index of a background color in the global color table.",21,null],[3,"ApplicationExtension","","Contains metadata for application extension block.",null,null],[12,"application_identifier","","Eight ASCII bytes of an application identifier.",22,null],[12,"authentication_code","","Three bytes of an application authentication code.",22,null],[3,"CommentExtension","","Represents a comment extension block.",null,null],[3,"Metadata","","Contains metadata about the whole GIF image.",null,null],[12,"version","","GIF format version from the file header.",23,null],[12,"dimensions","","Logical screen dimensions of the image.",23,null],[12,"global_color_table","","Information about global color table, if it is present.",23,null],[12,"color_resolution","","Number of colors available to the original image.",23,null],[12,"background_color_index","","Index of the default background color in the global color table.",23,null],[12,"pixel_aspect_ratio","","A factor which defines the aspect ration of a pixel in the original image.",23,null],[12,"blocks","","Metadata for each block in the GIF image.",23,null],[4,"Version","","GIF file version number.",null,null],[13,"V87a","","",24,null],[13,"V89a","","",24,null],[4,"Block","","Represents various kinds of blocks which can be used in a GIF image.",null,null],[13,"ImageDescriptor","","An image descriptor (image contents for one frame).",25,null],[13,"GraphicControlExtension","","Graphics control metadata block (e.g. frame delay or transparency).",25,null],[13,"PlainTextExtension","","Plain text block (textual data that can be displayed as an image).",25,null],[13,"ApplicationExtension","","Application information block (contains information about application which created the\nimage).",25,null],[13,"CommentExtension","","Comment block (contains commentary data which is not displayed in the image).",25,null],[4,"DisposalMethod","","Describes disposal methods used for GIF image frames.",null,null],[13,"None","","The decoder is not required to take any action.",26,null],[13,"DoNotDispose","","The graphic is to be left in place.",26,null],[13,"RestoreToBackgroundColor","","The area used by the graphic must be restored to the background color.",26,null],[13,"RestoreToPrevious","","The decoder is required to restore the area overwritten by the graphic with what\nwas there prior to rendering the graphic.",26,null],[11,"fmt","","",24,{"inputs":[{"name":"version"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"version"}],"output":{"name":"version"}}],[11,"fmt","","",25,{"inputs":[{"name":"block"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"block"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"block"},{"name":"block"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"block"}],"output":{"name":"block"}}],[11,"fmt","","",18,{"inputs":[{"name":"colortable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"colortable"},{"name":"colortable"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"colortable"},{"name":"colortable"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"colortable"}],"output":{"name":"colortable"}}],[11,"fmt","","",19,{"inputs":[{"name":"imagedescriptor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"imagedescriptor"},{"name":"imagedescriptor"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"imagedescriptor"},{"name":"imagedescriptor"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"imagedescriptor"}],"output":{"name":"imagedescriptor"}}],[11,"fmt","","",20,{"inputs":[{"name":"graphiccontrolextension"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"graphiccontrolextension"},{"name":"graphiccontrolextension"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"graphiccontrolextension"},{"name":"graphiccontrolextension"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"graphiccontrolextension"}],"output":{"name":"graphiccontrolextension"}}],[11,"delay_time_ms","","Returns delay time in milliseconds.",20,{"inputs":[{"name":"graphiccontrolextension"}],"output":{"name":"u32"}}],[11,"fmt","","",26,{"inputs":[{"name":"disposalmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"disposalmethod"},{"name":"disposalmethod"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"disposalmethod"},{"name":"disposalmethod"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"disposalmethod"}],"output":{"name":"disposalmethod"}}],[11,"fmt","","",21,{"inputs":[{"name":"plaintextextension"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"plaintextextension"},{"name":"plaintextextension"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"plaintextextension"},{"name":"plaintextextension"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"plaintextextension"}],"output":{"name":"plaintextextension"}}],[11,"fmt","","",22,{"inputs":[{"name":"applicationextension"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"applicationextension"},{"name":"applicationextension"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"applicationextension"},{"name":"applicationextension"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"applicationextension"}],"output":{"name":"applicationextension"}}],[11,"application_identifier_str","","Returns application identifier as a UTF-8 string, if possible.",22,{"inputs":[{"name":"applicationextension"}],"output":{"name":"option"}}],[11,"authentication_code_str","","Returns authentication code as a UTF-8 string, if possible.",22,{"inputs":[{"name":"applicationextension"}],"output":{"name":"option"}}],[11,"fmt","","",27,{"inputs":[{"name":"commentextension"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"commentextension"},{"name":"commentextension"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"commentextension"},{"name":"commentextension"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"commentextension"}],"output":{"name":"commentextension"}}],[11,"fmt","","",23,{"inputs":[{"name":"metadata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"metadata"},{"name":"metadata"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"metadata"},{"name":"metadata"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"metadata"}],"output":{"name":"metadata"}}],[11,"pixel_aspect_ratio_approx","","Computes pixel aspect ratio approximation, if it is available.",23,{"inputs":[{"name":"metadata"}],"output":{"name":"option"}}],[11,"frames_number","","Computes the number of frames, i.e. the number of image descriptor blocks.",23,{"inputs":[{"name":"metadata"}],"output":{"name":"usize"}}],[11,"is_animated","","Returns `true` if the image is animated, `false` otherwise.",23,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"load","","",23,{"inputs":[{"name":"metadata"},{"name":"r"}],"output":{"name":"result"}}],[0,"webp","immeta::formats","",null,null],[3,"VP8Metadata","immeta::formats::webp","",null,null],[12,"version_number","","",28,null],[12,"show_frame","","",28,null],[12,"first_partition_len","","",28,null],[12,"frame","","",28,null],[3,"VP8LMetadata","","",null,null],[3,"VP8XMetadata","","",null,null],[4,"Metadata","","",null,null],[13,"VP8","","",29,null],[13,"VP8L","","",29,null],[13,"VP8X","","",29,null],[4,"VP8Frame","","",null,null],[13,"Key","","",30,null],[12,"dimensions","immeta::formats::webp::VP8Frame","",30,null],[12,"x_scale","","",30,null],[12,"y_scale","","",30,null],[13,"Inter","immeta::formats::webp","",30,null],[11,"fmt","","",29,{"inputs":[{"name":"metadata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"metadata"},{"name":"metadata"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"metadata"},{"name":"metadata"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"metadata"}],"output":{"name":"metadata"}}],[11,"fmt","","",28,{"inputs":[{"name":"vp8metadata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"vp8metadata"},{"name":"vp8metadata"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"vp8metadata"},{"name":"vp8metadata"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"vp8metadata"}],"output":{"name":"vp8metadata"}}],[11,"fmt","","",30,{"inputs":[{"name":"vp8frame"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"vp8frame"},{"name":"vp8frame"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"vp8frame"},{"name":"vp8frame"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"vp8frame"}],"output":{"name":"vp8frame"}}],[11,"fmt","","",31,{"inputs":[{"name":"vp8lmetadata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"vp8lmetadata"},{"name":"vp8lmetadata"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"vp8lmetadata"},{"name":"vp8lmetadata"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"vp8lmetadata"}],"output":{"name":"vp8lmetadata"}}],[11,"fmt","","",32,{"inputs":[{"name":"vp8xmetadata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"vp8xmetadata"},{"name":"vp8xmetadata"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"vp8xmetadata"},{"name":"vp8xmetadata"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"vp8xmetadata"}],"output":{"name":"vp8xmetadata"}}],[11,"dimensions","","",29,{"inputs":[{"name":"metadata"}],"output":{"name":"dimensions"}}],[11,"load","","",29,{"inputs":[{"name":"metadata"},{"name":"r"}],"output":{"name":"result"}}],[6,"Result","immeta","Library-specific result type.",null,null],[8,"LoadableMetadata","","Provides several convenience functions for loading metadata from various sources.",null,null],[10,"load","","Loads the implementing type from the given input stream.",33,{"inputs":[{"name":"loadablemetadata"},{"name":"r"}],"output":{"name":"result"}}],[11,"load_from_file","","Loads the implementing type from a file specified by the given path.",33,{"inputs":[{"name":"loadablemetadata"},{"name":"p"}],"output":{"name":"result"}}],[11,"load_from_buf","","Loads the implementing type from an in-memory buffer.",33,null],[11,"load_from_file","","Loads the implementing type from a file specified by the given path.",33,{"inputs":[{"name":"loadablemetadata"},{"name":"p"}],"output":{"name":"result"}}],[11,"load_from_buf","","Loads the implementing type from an in-memory buffer.",33,null]],"paths":[[3,"Dimensions"],[4,"Error"],[4,"GenericMetadata"],[8,"MetadataMarker"],[4,"Jpeg"],[4,"Png"],[4,"Gif"],[4,"Webp"],[3,"ChunkId"],[3,"RiffReader"],[3,"RiffChunk"],[3,"RiffListChunk"],[3,"Metadata"],[3,"Metadata"],[4,"ColorType"],[4,"CompressionMethod"],[4,"FilterMethod"],[4,"InterlaceMethod"],[3,"ColorTable"],[3,"ImageDescriptor"],[3,"GraphicControlExtension"],[3,"PlainTextExtension"],[3,"ApplicationExtension"],[3,"Metadata"],[4,"Version"],[4,"Block"],[4,"DisposalMethod"],[3,"CommentExtension"],[3,"VP8Metadata"],[4,"Metadata"],[4,"VP8Frame"],[3,"VP8LMetadata"],[3,"VP8XMetadata"],[8,"LoadableMetadata"]]};
searchIndex['num'] = {"items":[[0,"","num","Simple numerics.",null,null],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[0,"complex","","Complex numbers.",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"integer","num","Integer trait and functions.",null,null],[5,"div_rem","num::integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",1,null],[0,"iter","num","External iterators for generic mathematics",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",2,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",4,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",5,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[0,"traits","num","Numeric traits for generic mathematics",null,null],[3,"ParseFloatError","num::traits","",null,null],[12,"kind","","",6,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",7,null],[13,"Invalid","","",7,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","Parse error for `from_str_radix`",8,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",8,{"inputs":[{"name":"num"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",9,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",9,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",10,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",11,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",11,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",11,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",11,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",11,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",12,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",12,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",13,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",13,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",14,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",15,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",16,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",17,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",18,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",18,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",18,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",18,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",18,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",18,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",18,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",18,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",18,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",18,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",18,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",18,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",21,{"inputs":[{"name":"numcast"},{"name":"t"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",22,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",22,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",22,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",22,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",22,null]],"paths":[[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"]]};
searchIndex['byteorder'] = {"items":[[0,"","byteorder","This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.",null,null],[4,"Error","","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","std::io::error","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","A short-hand for `result::Result<T, byteorder::Error>`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",4,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",4,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",4,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",4,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",4,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",4,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",4,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",4,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",4,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",4,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",4,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",4,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",4,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",4,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"read_u16","","",6,null],[11,"read_u32","","",6,null],[11,"read_u64","","",6,null],[11,"read_uint","","",6,null],[11,"write_u16","","",6,null],[11,"write_u32","","",6,null],[11,"write_u64","","",6,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[3,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
initSearch(searchIndex);
